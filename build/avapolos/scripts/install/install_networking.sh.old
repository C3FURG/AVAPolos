#!/usr/bin/env bash

#-------------------------------------------#
# AVAPolos - Script de configuração de rede #
#-------------------------------------------#

source /etc/avapolos/header.sh

if [ "$EUID" -ne 0 ]; then
    echo "Este script precisa ser rodado como root."
    exit
fi

#----------------------------------------------------------

enableDnsmasq="false"
echo "install_networking.sh" | log debug

#----------------------------------------------------------

rm -rf $NETWORKING_PATH/enable

getInterface() {

  blacklist="lo docker br veth tun"
  priority=("en" "wl")
  for if in $(ifconfig | grep ^[a-zA-Z] | cut -d":" -f1); do
    ifs+=("$if")
  done
  for item in $blacklist; do
    ifs=("${ifs[@]/*$item*}")
  done

  new_ifs=()
  for item in ${ifs[@]}; do
    if ! [ -z "$item" ]; then
      new_ifs+=("$item")
    fi
  done
  ifs=(${new_ifs[@]})
  unset new_ifs

  if [ ${#ifs[@]} -eq 1 ]; then
    interface=${ifs[0]}
  elif [ $INTERACTIVE="false" ]; then
    flag="false"
    while [ "$flag" = "false" ]; do
      for if in $ifs; do
        for counter in $(seq 0 $((${#priority[@]} - 1 ))); do
          if [[ "$if" =~ ${priority[counter]} ]]; then
            interface=$if
            flag="true"
          fi
        done
      done
    done
  # else
  #   log warn "A interface principal não foi detectada automaticamente"
  #   option=$(input "Deseja selecionar uma manualmente?" "sim" "nao" 1 "Selecione uma opção.")
  #   if [ "$option" = "nao" ]; then
  #     log error "Cancelando instalação."
  #     exit 1
  #   fi
  #
  #   log debug "Interfaces detectadas:"
  #   for counter in ${!ifs[@]}; do
  #     log debug "$counter. ${ifs[counter]}"
  #   done
  #   flag=false
  #   while [ "$flag" = "false" ]; do
  #     echo "Selecione uma interface: (0-$c)"
  #     read option
  #     for counter in ${!ifs[@]}; do
  #       if [ "$option" = "$counter" ]; then
  #         flag="true"
  #       fi
  #     done
  #   done
  #   interface=${ifs[option]}
  fi

  echo $interface > interface
  echo $interface
}
getIP() { #$1-> interface
  if ! [ -z "$1" ]; then
    ip=$(ip -o -f inet addr show | grep "$1" | awk '/scope global/ {print $4}')

    if ! [ -z $ip ]; then
      echo $ip
    fi
  fi
}
getGW() { #$1-> interface
  if ! [ -z "$1" ]; then
    gw=$(ip route | grep "default" | grep "$1" | awk '{print $3}')
    echo $gw
  fi
}
getNS(){ #$1-> interface

  cmdRet=$(systemd-resolve --status)
  hasDns=$(echo $cmdRet | grep -o "DNS Servers: ")

  if ! [ -z "$hasDns" ]; then
    ifstart=$(echo "$cmdRet" | grep "(""$1"")" -m 1 -n | cut -d":" -f1)
    lineEnd=$(echo "$cmdRet" | wc -l)
    ifFromEnd=$(( $lineEnd - $ifstart ))
    #try to find DNS Domain
    endLink=$(echo "$cmdRet" | tail -n $ifFromEnd | grep 'Link' -m 1 -n | cut -d":" -f1)
    if [ -z "$endLink" ]; then
       #try to find next link
       endLink=$(echo "$cmdRet" | tail -n $ifFromEnd | grep 'DNS Domain' -m 1 -n | cut -d":" -f1)
       if [ -z "$endLink" ]; then
          endLink=$lineEnd
       fi
    fi
    if [ ! $endLink -eq $lineEnd ]; then
       endLink=$(( $endLink - 1))
    fi

    cmdFromIf=$(echo "$cmdRet" | tail -n $ifFromEnd | head -n $endLink)
    dnsArr=$(echo "$cmdFromIf" | rev | grep -Eo '([0-9]{1,3}\.){3}[0-9]\ ' | rev)
    newDnsArr=()
    for dns in $dnsArr; do
      newDnsArr+=("$dns")
    done
    dnsArr=(${newDnsArr[@]})
    unset newDnsArr

    echo ${dnsArr[@]}

  fi

}
generateNetworkDConfig() { # $1-> interface $2-> ip/mask $3-> gateway $4-> dns1 $5-> dns2 $6-> dryRun (true,false)
  cd /lib/systemd/network
  if [ "$6" = "true" ]; then
    echo -e "[Match]" | log debug
    echo -e "Name=$1" | log debug
    echo -e " " | log debug
    echo -e "[Link]" | log debug
    echo -e "RequiredForOnline=no" | log debug
    echo -e " " | log debug
    echo -e "[Network]" | log debug
    echo -e "IgnoreCarrierLoss=true" | log debug
    echo -e "ConfigureWithoutCarrier=true" | log debug
    echo -e "LinkLocalAddressing=ipv6" | log debug
    echo -e "Address=$2" | log debug
    echo -e "Gateway=$3" | log debug
    echo -e "DNS=$4" | log debug
    echo -e "DNS=$5" | log debug
  else
    echo -e "[Match]" > 00-avapolos.network
    echo -e "Name=$1" >> 00-avapolos.network
    echo -e " " >> 00-avapolos.network
    echo -e "[Link]" >> 00-avapolos.network
    echo -e "RequiredForOnline=no" >> 00-avapolos.network
    echo -e " " >> 00-avapolos.network
    echo -e "[Network]" >> 00-avapolos.network
    echo -e "IgnoreCarrierLoss=true" >> 00-avapolos.network
    echo -e "ConfigureWithoutCarrier=true" >> 00-avapolos.network
    echo -e "LinkLocalAddressing=ipv6" >> 00-avapolos.network
    echo -e "Address=$2" >> 00-avapolos.network
    echo -e "Gateway=$3" >> 00-avapolos.network
    echo -e "DNS=$4" >> 00-avapolos.network
    echo -e "DNS=$5" >> 00-avapolos.network
  fi
}
applyNetworkDConfig() {
  cd /lib/systemd/network

  sudo chmod 644 00-avapolos.network

  command=$(systemctl restart systemd-networkd.service | log debug)
  if [ $? -ne 0 ]; then
    echo "Houve um erro na aplicação da configuração" | log error
    exit 2
  else
    echo "Configurações aplicadas com sucesso." | log debug
    systemctl enable systemd-networkd.service | log debug
  fi
}
generateHosts() { # $1-> ip(without mask) $2-> dryRun (true,false)
  if [ -z "$1" ]; then
    echo "Nenhum ip foi passado para o generate hosts" | log error
    exit 1
  fi
  if [ "$2" = "true" ]; then
    echo "Gerando arquivo /etc/hosts dry run." | log debug
    echo -e "#Automatically set by AVA-Polos solution." | log debug
    echo -e "$1 avapolos" | log debug
    echo -e "$1 moodle.avapolos" | log debug
    echo -e "$1 wiki.avapolos" | log debug
    echo -e "$1 educapes.avapolos" | log debug
    echo -e "$1 traefik.avapolos" | log debug
    echo -e "$1 menu.avapolos" | log debug
    echo -e "$1 downloads.avapolos" | log debug
    echo -e "$1 portainer.avapolos" | log debug
  else
    echo "Gerando arquivo /etc/hosts" | log debug
    echo -e "#Automatically set by AVA-Polos solution." >> /etc/hosts
    echo -e "$1 avapolos" >> /etc/hosts
    echo -e "$1 moodle.avapolos" >> /etc/hosts
    echo -e "$1 wiki.avapolos" >> /etc/hosts
    echo -e "$1 educapes.avapolos" >> /etc/hosts
    echo -e "$1 traefik.avapolos" >> /etc/hosts
    echo -e "$1 menu.avapolos" >> /etc/hosts
    echo -e "$1 downloads.avapolos" >> /etc/hosts
    echo -e "$1 portainer.avapolos" >> log debug
  fi
}
applyHosts() {
  echo "Aplicando alterações no arquivo /etc/hosts" | log debug
  cd /etc/
  cp hosts hosts.old
  generateHosts "$1"
}
disableNetworkManagerIfExists() { #$1-> dryRun (true,false)
  if [ "$1" = "true" ]; then
    if [ -f /etc/init.d/network-manager ]; then
      echo "dry run desativaria o NetworkManager" | log debug
    fi
  else
    if [ -f /etc/init.d/network-manager ]; then
      echo "Desabilitando serviço padrão de gerenciamento de redes." | log debug
      sudo systemctl disable NetworkManager | log debug
      sudo systemctl stop NetworkManager | log debug
      sudo systemctl mask NetworkManager | log debug
    fi
    echo "Gerando backup dos perfis de conexão anteriores." | log debug
    cd /etc/netplan
    sudo mkdir -p old
    if ! [ -z "$(ls | grep -o "yaml")" ]; then
      sudo mv -f *.yaml old
      echo "Desativando netplan" | log debug
    fi
    sudo netplan apply | log debug
  fi
}
disableResolved() {
  echo "Parando serviço padrão de nomes" | log debug
  sudo systemctl stop systemd-resolved | log debug
  sudo systemctl disable systemd-resolved | log debug
  sudo systemctl mask systemd-resolved | log debug
}

main() {

  echo "getInterface" | log debug
  INTERFACE=$(getInterface)
  echo "interface selecionada: $INTERFACE" | log debug

  echo "getIP" | log debug
  IP=$(getIP $INTERFACE)
  echo "IP detectado: $IP" | log debug

  if [ -z "$IP" ]; then

    enableDnsmasq="true"
    IP="10.254.0.1/16"
    DNS1="10.254.0.1"
    GW="10.254.0.1"

    echo "+-----------------------------------------------------" | log info
    echo "|Nenhum ip detectado, utilizando configurações padrão." | log info
    echo "|" | log info
    echo "|Os seguintes parâmetros serão configurados:" | log info
    echo "|Interface:$interface" | log info
    echo "|IP do Host: 10.254.0.1/16" | log info
    echo "|Servidor DNS: 10.254.0.1" | log info
    echo "|Gateway da rede: 10.254.0.1" | log info
    echo "+-----------------------------------------------------" | log info
    echo "|Subrede estática: 10.254.0.0" | log info
    echo "|Subrede DHCP: 10.254.1.0" | log info
    echo "+-----------------------------------------------------" | log info

  else

    echo "getGW" | log debug
    GW=$(getGW $INTERFACE)
    echo "Gateway detectado: $GW" | log debug

    echo "getNS" | log debug
    DNS=($(getNS $INTERFACE))
    echo "Servidores DNS detectados: ${DNS[@]}" | log debug

    if [ -z "$DNS" ]; then
      NS1="1.1.1.1"
      NS2="8.8.8.8"
      echo "Nenhum servidor DNS detectado, configurando automaticamente." | log warn
    else
      NS1=${DNS[0]}
      NS2=${DNS[1]}
    fi
  fi

  if [ "$enableDnsmasq" = "true" ]; then
    echo "dnsmasq será iniciado." | log debug
    touch $NETWORKING_PATH/enable
  else
    echo "--------------------------------------------" | log info
    echo "Os seguintes parâmetros serão configurados:" | log info
    echo "Interface:$INTERFACE" | log info
    echo "IP do Host: $IP" | log info
    echo "Gateway da rede: $GW" | log info
    echo "DNS1: $NS1" | log info
    echo "DNS2: $NS2" | log info
    echo "--------------------------------------------" | log info
  fi

  disableNetworkManagerIfExists
  echo "Criando arquivo de configuração: 00-avapolos.network" | log debug
  generateNetworkDConfig "$INTERFACE" "$IP" "$GW" "$NS1" "$NS2"
  applyNetworkDConfig
  applyHosts $(echo "$IP" | cut -d "/" -f1)

  cd $NETWORKING_PATH
  if [ -f enable ]; then
    disableResolved
    echo "Inicializando dnsmasq, pode ser acessado pela porta 5380. (admin/admin)" | log debug
    docker-compose up -d | log debug
  fi

  cd $ROOT_PATH
  echo "router.yml" >> $SERVICES_PATH/enabled_services
  echo "hub_name.yml" >> $SERVICES_PATH/enabled_services
  echo "Criando rede para o proxy reverso." | log debug

  docker network create --driver bridge proxy || true 2>&1 | log debug

}

#----------------------------------------------------------

main
